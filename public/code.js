"use strict";function t(t,e,o,i){return new(o||(o=Promise))((function(n,a){function s(t){try{d(i.next(t))}catch(t){a(t)}}function r(t){try{d(i.throw(t))}catch(t){a(t)}}function d(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,r)}d((i=i.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError,console.clear(),figma.showUI(__html__,{width:330,height:500,themeColors:!0});const e=figma.currentPage.findAllWithCriteria({types:["COMPONENT"]});let o=[];function i(){return t(this,void 0,void 0,(function*(){let t;try{t=yield figma.clientStorage.getAsync("tutorial")}catch(t){console.log("Storage error:",t)}figma.ui.postMessage({type:"loaded-tutorial",data:t||void 0})}))}function n(t,e,o,i){const n=Math.floor((e-1-t)/i),a=(e-1-t)%i;return{x:o.x+64*a,y:o.y+80*n}}0!==e.length&&e.forEach((t=>{const e=t.getPluginData("importedIcon");if(!e)return;let i=JSON.parse(e);i.status="",o.push(i)})),0!==o.length?figma.ui.postMessage({type:"loaded-nodes",data:o}):figma.ui.postMessage({type:"loaded-nodes-empty"}),i(),figma.ui.onmessage=t=>{if("get-tutorials"===t.type&&(console.log("get-tutorials"),i()),"save-tutorials"===t.type&&(figma.clientStorage.setAsync("tutorial",t.data),i()),"create-library"===t.type){const e={x:0,y:0},o=50;let i={added:[],updated:[]};const a=t.doc.reverse();a.forEach(((t,s)=>{if(t.hash,"added"===t.status){const r=t,d=figma.createNodeFromSvg(t.svg);d.name="svg";const c=figma.createComponent();c.resizeWithoutConstraints(d.width,d.height),c.appendChild(d),figma.ungroup(d);let g,l=n(s,a.length,e,o);c.x=l.x,c.y=l.y,g=t.folder.join("/")+(t.folder.length>0?"/":"")+t.name,t.dimensions[0]!==t.dimensions[1]&&(g=g+"_"+t.dimensions[0]),c.name=g,r.id=c.id,c.setPluginData("importedIcon",JSON.stringify(r)),i.added.push(t)}else{let i=figma.getNodeById(t.id);if(i){let t=n(s,a.length,e,o);i.x=t.x,i.y=t.y}}if("changed"===t.status){let e=figma.getNodeById(t.id);const o=figma.createNodeFromSvg(t.svg);o.name="svg";const i=e.children;e.resizeWithoutConstraints(o.width,o.height),i.forEach((t=>{t.remove()}));const n=t;e.setPluginData("importedIcon",JSON.stringify(n)),e.appendChild(o),figma.ungroup(o)}if("deleted"===t.status){const e=t;figma.getNodeById(t.id).setPluginData("importedIcon",JSON.stringify(e))}}));for(const t in i)console.log(`${i[t].length} item(s) ${t}`);const s=figma.getNodeById("0:0");Object.keys(s.getRelaunchData()).includes("update")||s.setRelaunchData({update:"Import SVGs to update icon components in this file"}),figma.ui.postMessage({type:"done-create-library"}),figma.notify("Successfully updated icon components")}};
